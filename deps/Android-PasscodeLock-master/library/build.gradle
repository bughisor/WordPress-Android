buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
    }
}

apply plugin: 'android-library'
apply plugin: 'maven'

repositories {
    mavenCentral()
}

dependencies {
}

version '0.0.5'

android {

    compileSdkVersion 19
    buildToolsVersion "19.0.1"
    
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

}

// Generates the Config.java class using properties defined in local.properties
// or by other means provided by Gradle
task generateWPConfig(group: "generate", description: "Generate Config class") {
    def dir = "${buildDir}/source/passcode"
    def file = new File(dir, "org/wordpress/passcodelock/Config.java")
    android {
        sourceSets {
            main {
                java {
                    srcDir dir
                }
            }
        }
    }
    outputs.file file
    doLast {
        file.getParentFile().mkdirs()
        def properties = new Properties()
        new File("${rootDir}/local.properties").withInputStream { stream ->
            properties.load(stream)
        }
        def constants = [:]
        properties.propertyNames().each { property ->
            def keys = property.tokenize('.')
            if (keys[0] == 'passcodelock') {
                def name = property.tokenize('.')[1..-1].collect { key -> key.toUpperCase() }.join('_')
                constants[name] = properties.getProperty(property)
            }
        }
        def writer = new FileWriter(file)
        def config = constants.inject("") { consts, name, val ->
            consts + "   public static final String ${name} = \"${val}\";\n"
        }
        writer.write("""/* auto-generated file do not modify */
package org.wordpress.passcodelock;

public final class Config {

${config}
}
""")
        writer.close()
    }
}

// Add the generateWPConfig task to every flavor's compile tasks
android.buildTypes.all { buildType ->
    def name = "generate${buildType.name.capitalize()}BuildConfig"
    tasks.whenTaskAdded { task ->
        if (task.name == name) {
            task.dependsOn(generateWPConfig)
            task.mustRunAfter(generateWPConfig)
        }
    }
}


task writePom << {
    pom {
        project {
            groupId "org.wordpress"
            artifactId "android-passcodelock"
            packaging "aar"
        }
    }.writeTo("$buildDir/pom.xml")
}
